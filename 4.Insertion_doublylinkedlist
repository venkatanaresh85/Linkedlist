#Insertion of node at beginning
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* back;
    Node(int data1, Node* next1, Node* back1) {
        data = data1;
        next = next1;
        back = back1;
    }
    Node(int data1) {
        data = data1;
        next = nullptr;
        back = nullptr;
    }
};

Node* Convertarray(vector<int>& v) {
    Node* head = new Node(v[0]);
    Node* mover = head;
    for (int i = 1; i < v.size(); i++) {
        Node* temp = new Node(v[i], nullptr, mover);
        mover->next = temp;
        mover = temp;
    }
    return head;
}


Node* Insertion(Node* head,int val){
   if(head==nullptr){
       Node* temp=new Node(val);
       temp->back=nullptr;
       temp->next=nullptr;
       return temp;
   }
   Node* temp=new Node(val);
   temp->next=head;
   head->back=temp;
   temp->back=nullptr;
   return temp;
}

void print(Node* head) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }
    while (head->next != nullptr) {
        cout << head->data << "->";
        head = head->next;
    }
    cout << head->data << endl;
}

int main() {
    vector<int> v = {10,20,30,40,50};
    Node* head = Convertarray(v);
    head=Insertion(head,5);
    print(head);
}

#Insertion Before the Tail

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* back;
    Node(int data1, Node* next1, Node* back1) {
        data = data1;
        next = next1;
        back = back1;
    }
    Node(int data1) {
        data = data1;
        next = nullptr;
        back = nullptr;
    }
};

Node* Convertarray(vector<int>& v) {
    Node* head = new Node(v[0]);
    Node* mover = head;
    for (int i = 1; i < v.size(); i++) {
        Node* temp = new Node(v[i], nullptr, mover);
        mover->next = temp;
        mover = temp;
    }
    return head;
}




Node* InsertionTail(Node* head,int val){
    if(head==nullptr){
       Node* temp=new Node(val);
       temp->back=nullptr;
       temp->next=nullptr;
       return temp;
   }
   Node* temp=head;
   while(temp->next!=nullptr){
       temp=temp->next;
   }
   Node* prev=temp->back;
   Node* newN=new Node(val);
   newN->next=temp;
   prev->next=newN;
   temp->back=newN;
   return head;
}
void print(Node* head) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }
    while (head->next != nullptr) {
        cout << head->data << "->";
        head = head->next;
    }
    cout << head->data << endl;
}

int main() {
    vector<int> v = {10,20,30,40,50};
    Node* head = Convertarray(v);
    head=InsertionTail(head,60);
    print(head);
}


#Insertion of Node in kthplace before

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* back;
    Node(int data1, Node* next1, Node* back1) {
        data = data1;
        next = next1;
        back = back1;
    }
    Node(int data1) {
        data = data1;
        next = nullptr;
        back = nullptr;
    }
};

Node* Convertarray(vector<int>& v) {
    Node* head = new Node(v[0]);
    Node* mover = head;
    for (int i = 1; i < v.size(); i++) {
        Node* temp = new Node(v[i], nullptr, mover);
        mover->next = temp;
        mover = temp;
    }
    return head;
}


Node* Insertion(Node* head,int val){
   if(head==nullptr){
       Node* temp=new Node(val);
       temp->back=nullptr;
       temp->next=nullptr;
       return temp;
   }
   Node* temp=new Node(val);
   temp->next=head;
   head->back=temp;
   temp->back=nullptr;
   return temp;
}

Node* InsertionbeforeK(Node* head,int k,int val){
    if(k==1){
        return Insertion(head,val);
    }
   Node* temp=head;
   int cnt=0;
   while(temp!=nullptr && cnt<(k-1)){
       cnt++;
       temp=temp->next;
    
   }
   Node* prev=temp->back;
   Node* newN=new Node(val);
   newN->next=temp;
   prev->next=newN;
   temp->back=newN;
   newN->back=prev;
   return head;
}
void print(Node* head) {
    if (head == nullptr) {
        cout << "List is empty\n";
        return;
    }
    while (head->next != nullptr) {
        cout << head->data << "->";
        head = head->next;
    }
    cout << head->data << endl;
}

int main() {
    vector<int> v = {10,20,30,40,50};
    Node* head = Convertarray(v);
    head=InsertionbeforeK(head,3,60);
    print(head);
}


