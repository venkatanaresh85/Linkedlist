#Convert Array into Doubly linkedlist

#include<bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* back;  // back = previous node

    Node(int data1, Node* next1 = nullptr, Node* back1 = nullptr) {
        data = data1;
        next = next1;
        back = back1;
    }
};

Node* Convertarray(vector<int>& v) {
    Node* head = new Node(v[0]); // first node
    Node* mover = head;

    for(int i = 1; i < v.size(); i++) {
        Node* temp = new Node(v[i], nullptr, mover); 
        mover->next = temp;  // forward connection
        mover = temp;        // move pointer ahead
    }
    return head;
}

void print(Node* head) {
    while(head->next != nullptr) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << head->data << endl;
}

int main() {
    vector<int> v = {10,20,30,40,50};
    Node* head = Convertarray(v);
    print(head);
}


#Deletion of Head in a Doubly Linkedlist
#include<bits/stdc++.h>
using namespace std;
struct Node{
    int data;
    Node* next;
    Node* back;
    Node(int data1,Node* next1,Node* back1){
        data=data1;
        next=next1;
        back=back1;
    }
    Node(int data1){
        data=data1;
        next=nullptr;
        back=nullptr;
    }
};
Node* Convertarray(vector<int>& v){
    Node* head=new Node(v[0]);//10-0x100
    Node* mover=head;
    for(int i=1;i<v.size();i++){
        Node* temp=new Node(v[i],nullptr,mover);//20-0x200
        mover->next=temp;
        mover=temp;
    }
    return head;
}
Node* deleteHead(Node* head){
    if(head==nullptr){
        return nullptr;
    }
    
    Node* temp=head;
    head=head->next;
    if(head!=nullptr)
    head->back=nullptr;
    delete temp;
    return head;
}
void print(Node* head){
    while(head->next!=nullptr){
        cout<<head->data<<"->";
        head=head->next;
    }
    cout<<head->data;
}
int main(){
    vector<int> v={10,20,30,40,50};
    Node* head=Convertarray(v);
    head=deleteHead(head);
    print(head);
}
